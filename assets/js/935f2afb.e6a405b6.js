"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"2.0.0-alpha.6","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"category","label":"Introduction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What is MVOM?","href":"/mvom/docs/Introduction/what_is_mvom","docId":"Introduction/what_is_mvom"},{"type":"link","label":"Installation","href":"/mvom/docs/Introduction/installation","docId":"Introduction/installation"},{"type":"link","label":"Setup and Configuration","href":"/mvom/docs/Introduction/setup_and_configuration","docId":"Introduction/setup_and_configuration"}]},{"type":"link","label":"Connection","href":"/mvom/docs/connection","docId":"connection"},{"type":"category","label":"Schema","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Basics","href":"/mvom/docs/Schema/schema_basics","docId":"Schema/schema_basics"},{"type":"category","label":"Scalar Schema Types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"String","href":"/mvom/docs/Schema/Scalar Schema Types/schema_type_string","docId":"Schema/Scalar Schema Types/schema_type_string"},{"type":"link","label":"Boolean","href":"/mvom/docs/Schema/Scalar Schema Types/schema_type_boolean","docId":"Schema/Scalar Schema Types/schema_type_boolean"},{"type":"link","label":"Number","href":"/mvom/docs/Schema/Scalar Schema Types/schema_type_number","docId":"Schema/Scalar Schema Types/schema_type_number"},{"type":"link","label":"ISOCalendarDate","href":"/mvom/docs/Schema/Scalar Schema Types/schema_type_isocalendardate","docId":"Schema/Scalar Schema Types/schema_type_isocalendardate"},{"type":"link","label":"ISOTime","href":"/mvom/docs/Schema/Scalar Schema Types/schema_type_isotime","docId":"Schema/Scalar Schema Types/schema_type_isotime"},{"type":"link","label":"ISOCalendarDateTime","href":"/mvom/docs/Schema/Scalar Schema Types/schema_type_isocalendardatetime","docId":"Schema/Scalar Schema Types/schema_type_isocalendardatetime"}]},{"type":"link","label":"Schema Options","href":"/mvom/docs/Schema/schema_options","docId":"Schema/schema_options"},{"type":"link","label":"Scalar Arrays","href":"/mvom/docs/Schema/schema_scalar_arrays","docId":"Schema/schema_scalar_arrays"},{"type":"link","label":"Embedded Objects","href":"/mvom/docs/Schema/schema_embedded_objects","docId":"Schema/schema_embedded_objects"},{"type":"link","label":"Object Arrays","href":"/mvom/docs/Schema/schema_object_arrays","docId":"Schema/schema_object_arrays"},{"type":"link","label":"Encryption","href":"/mvom/docs/Schema/schema_encryption","docId":"Schema/schema_encryption"}]},{"type":"link","label":"Model","href":"/mvom/docs/model","docId":"model"}]},"docs":{"connection":{"id":"connection","title":"Connection","description":"The first step to working with MVOM is to establish a connection to the database server via MVIS. Establishing a connection is facilitated via the Connection class which is exported from MVOM as a named export.","sidebar":"docsSidebar"},"Introduction/installation":{"id":"Introduction/installation","title":"Installation","description":"MVOM is available as an npm package. Install using your favorite package manager:","sidebar":"docsSidebar"},"Introduction/setup_and_configuration":{"id":"Introduction/setup_and_configuration","title":"Setup and Configuration","description":"","sidebar":"docsSidebar"},"Introduction/what_is_mvom":{"id":"Introduction/what_is_mvom","title":"What is MVOM?","description":"MVOM (MultiValue Object Mapper) is a library which provides the ability to access Multivalue databases (e.g. Unidata, Universe) using applications written for Node.js.","sidebar":"docsSidebar"},"model":{"id":"model","title":"Model","description":"","sidebar":"docsSidebar"},"Schema/Scalar Schema Types/schema_type_boolean":{"id":"Schema/Scalar Schema Types/schema_type_boolean","title":"Boolean","description":"The Boolean schema type allows you to work with boolean values.","sidebar":"docsSidebar"},"Schema/Scalar Schema Types/schema_type_isocalendardate":{"id":"Schema/Scalar Schema Types/schema_type_isocalendardate","title":"ISOCalendarDate","description":"The ISOCalendarDate schema type allow you to work with date values.","sidebar":"docsSidebar"},"Schema/Scalar Schema Types/schema_type_isocalendardatetime":{"id":"Schema/Scalar Schema Types/schema_type_isocalendardatetime","title":"ISOCalendarDateTime","description":"The ISOCalendarDateTime schema type allow you to work with compound date-time values.","sidebar":"docsSidebar"},"Schema/Scalar Schema Types/schema_type_isotime":{"id":"Schema/Scalar Schema Types/schema_type_isotime","title":"ISOTime","description":"The ISOTime schema type allow you to work with time values.","sidebar":"docsSidebar"},"Schema/Scalar Schema Types/schema_type_number":{"id":"Schema/Scalar Schema Types/schema_type_number","title":"Number","description":"The number schema type allows you to work with numeric values.","sidebar":"docsSidebar"},"Schema/Scalar Schema Types/schema_type_string":{"id":"Schema/Scalar Schema Types/schema_type_string","title":"String","description":"The string schema type is the simplest of the schema types supported by MVOM.","sidebar":"docsSidebar"},"Schema/schema_basics":{"id":"Schema/schema_basics","title":"Basics","description":"The Schema class allows you to define your data definition for your MultiValue files. This definition is used to transform MultiValue data between the database and a JavaScript object. Additionally, it allows you to define data validation requirements to aid in ensuring data validity upon writing to the database.","sidebar":"docsSidebar"},"Schema/schema_embedded_objects":{"id":"Schema/schema_embedded_objects","title":"Embedded Objects","description":"MVOM will work with the defined schema structure to produce an object that follows the structure of the schema. That is, a property of a schema definition can also be a schema definition. In this way, an object can be embedded in the parent object. This allows for relating data that might be semantically understood more easily if it was held in a contained object rather than being properties of the parent object.","sidebar":"docsSidebar"},"Schema/schema_encryption":{"id":"Schema/schema_encryption","title":"Encryption","description":"","sidebar":"docsSidebar"},"Schema/schema_object_arrays":{"id":"Schema/schema_object_arrays","title":"Object Arrays","description":"MVOM allows schema definitions which produce arrays of objects. In MultiValue terminology, these structures are generally referred to as \\"associations\\". They are generally structured as parallel associative arrays where each array index from an attribute is related to the same index in one or more other attributes.","sidebar":"docsSidebar"},"Schema/schema_options":{"id":"Schema/schema_options","title":"Schema Options","description":"Several options can be passed to the schema constructor. As defined in Schema Basics, the syntax of the Schema constructor is:","sidebar":"docsSidebar"},"Schema/schema_scalar_arrays":{"id":"Schema/schema_scalar_arrays","title":"Scalar Arrays","description":"MVOM allows schema definitions that define arrays of any scalar schema types. In the MultiValue database, these would typically be stored as a multivalued or multi-subvalued attribute.","sidebar":"docsSidebar"}}}')}}]);